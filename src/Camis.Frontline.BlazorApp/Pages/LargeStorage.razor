@* @page "/storage"
@using Microsoft.JSInterop

<PageTitle>Store Large File</PageTitle>


@using IndexedDB

<div>
    <h2>File Storage</h2>

    <input type="file" id="file-upload" onchange="@OnFileUploadAsync" />

    <button type="button" @onclick="@StoreFileAsync">Store File</button>
</div>

@code {
    private IDBDatabase db;
    private IDBObjectStore fileStore;

    protected override async Task OnInitializedAsync()
    {
        db = await IndexedDB.OpenAsync("file-storage");
        fileStore = await db.CreateObjectStoreAsync("files");
    }

    private async Task OnFileUploadAsync(ChangeEventArgs e)
    {
        var file = e.Target.As<InputFile>().Files[0];
        var blob = new Blob(new File[] { file });

        await fileStore.PutAsync(blob, file.Name);
    }

    private async Task StoreFileAsync()
    {
        var file = await fileStore.GetAsync("my-file.txt");

        // Do something with the file
    }
}


<h3>Image Storage</h3>

<input type="file" @ref="imageInput" />
<button @onclick="StoreImage">Store Image</button>

<img src="@imageUrl" alt="Stored Image" />

@code {
    private ElementReference imageInput;
    private string imageUrl;
    private IJSObjectReference fileInput;


    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private async Task HandleFileSelect(InputFileChangeEventArgs e)
    {
        var imageFile = e.GetMultipleFiles()[0];
        if (imageFile != null)
        {
            var imageData = await GetBase64ImageData(imageFile);
            imageUrl = "data:image/jpg;base64," + imageData;
        }
    }

    private async Task StoreImage()
    {
        var imageFile = imageInput.files[0];
        if (imageFile != null)
        {
            var imageData = await GetBase64ImageData(imageFile);
            await JSRuntime.InvokeVoidAsync("indexedDBInterop.saveImage", imageData);
            imageUrl = "data:image/jpg;base64," + imageData;
        }
    }

    private async Task<string> GetBase64ImageData(IJSObjectReference file)
    {
        var arrayBuffer = await file.InvokeAsync<ArrayBuffer>("arrayBuffer");
        var byteArray = new byte[arrayBuffer.ByteLength];
        System.Runtime.InteropServices.Marshal.Copy(arrayBuffer, byteArray, 0, (int)arrayBuffer.ByteLength);
        return Convert.ToBase64String(byteArray);
    }
}

 *@