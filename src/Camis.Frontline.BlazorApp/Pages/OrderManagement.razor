@page "/orders"
@inject IJSRuntime JSRuntime
@using BlazorPWAOffline.Models;

<h3 class="d-print-none">Order Management</h3>

<div>
    <br />
    <h3>Order Details</h3>

    @if (OrderDetails != null && OrderDetails.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Product ID</th>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th class="d-print-none"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var orderDetail in OrderDetails)
                {
                    <tr>
                        <td>@orderDetail.ProductId</td>
                        <td>@orderDetail.ProductName</td>
                        <td>@orderDetail.Price.ToString("C")</td>
                        <td>@orderDetail.Quantity</td>
                        <td>@orderDetail.Total.ToString("C")</td>
                        <td class="d-print-none">
                            <button class="btn btn-danger" @onclick="() => RemoveOrderDetail(orderDetail)">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td></td>
                    <td></td>
                    <td>Total:</td>
                    <td>@totalQuantity</td>
                    <td>@total.ToString("C")</td>
                    <td class="d-print-none"></td>
                </tr>
            </tfoot>
        </table>
    }
    else
    {
        <p>No order details found.</p>
    }
</div>

<div class="d-print-none">
    <br />
    <button class="btn btn-secondary" @onclick="ReadAll">Reload</button>
    <button class="btn btn-secondary" @onclick="PrintOrder">Print</button>
    <br />
</div>

<div class="form d-print-none">
    @*      <div class="form-group">
    <label for="productId">Product ID:</label>
    <input type="text" class="form-control" id="productId" @bind="newOrderDetail.ProductId" required>
    </div> *@
    <div class="form-group">
        <label for="productName">Product Name:</label>
        <input type="text" class="form-control" id="productName" @bind="newOrderDetail.ProductName" required>
    </div>
    <div class="form-group">
        <label for="quantity">Quantity:</label>
        <input type="number" class="form-control" id="quantity" @bind="newOrderDetail.Quantity" required>
    </div>
    <div class="form-group">
        <label for="price">Price:</label>
        <input type="number" class="form-control" id="price" @bind="newOrderDetail.Price" required>
    </div>
    <br />
    <button class="btn btn-primary" @onclick="AddOrderDetail">Add</button>
</div>


<script>

</script>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ReadAll();
            StateHasChanged();
        }

    }

    private OrderDetail newOrderDetail = new OrderDetail();
    private double total;
    private double totalQuantity;

    private List<OrderDetail> OrderDetails = new List<OrderDetail>();

    private async Task PrintOrder()
    {
        await JSRuntime.InvokeVoidAsync("printOrder");
    }

    private async Task ReadAll()
    {
        var orderDetails = await JSRuntime.InvokeAsync<List<OrderDetail>>("readAllOrderDetails");
        //Calculate total
        total = 0;
        totalQuantity = 0;
        foreach (var orderDetail in orderDetails)
        {
            orderDetail.Total = orderDetail.Quantity * orderDetail.Price;
            total += orderDetail.Total;
            totalQuantity += orderDetail.Quantity;
        }
        OrderDetails = orderDetails;
    }

    private async Task AddOrderDetail()
    {
        newOrderDetail.Id = Guid.NewGuid().ToString();
        newOrderDetail.Total = newOrderDetail.Quantity * newOrderDetail.Price;
        OrderDetails.Add(newOrderDetail);
        await JSRuntime.InvokeVoidAsync("insertOrderDetail", newOrderDetail);
        newOrderDetail = new OrderDetail();
        await ReadAll();
    }

    private async Task RemoveOrderDetail(OrderDetail orderDetail)
    {
        OrderDetails.Remove(orderDetail);
        await JSRuntime.InvokeVoidAsync("deleteOrderDetail", orderDetail.Id);
        await ReadAll();
    }
}
