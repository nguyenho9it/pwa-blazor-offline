@page "/settings"
@inject IJSRuntime JSRuntime

<PageTitle>Bluetooth connections</PageTitle>

<h3 class="text-center pb-4">Settings</h3>

<div class="text-center pb-2">
    <button class="btn btn-outline-secondary" @onclick="DiscoverDevices">Discover Devices</button>
</div>

@if (devices != null && devices.Any())
{
    <h4>Discovered Devices:</h4>
    <ul>
        @foreach (var device in devices)
        {
            <li>
                @device.Name
                <button class="btn btn-outline-primary" @onclick="() => ConnectToDevice(device)">Connect</button>
            </li>
        }
    </ul>
}
@if (selectedDevice != null)
{
    <h4>Selected Device Info</h4>
    <p>Name: @selectedDevice?.Name</p>
    <p>ID: @selectedDevice?.Id</p>
}
else if (devices != null)
{
    <p>No devices found.</p>
}


<script>
    function discoverBluetoothDevices() {
        return navigator.bluetooth.requestDevice({ acceptAllDevices: true })
            .then(device => {
                return [{ Name: device.name, Id: device.id }];
            })
            .catch(error => {
                console.error(error);
                return [];
            });
    }
</script>

@code {

    private List<BluetoothDevice> devices = new List<BluetoothDevice>();
    private BluetoothDevice? selectedDevice = null;

    private async Task DiscoverDevices()
    {

        var newDevice = await GetDevices();
        if (newDevice != null && newDevice.Any())
        {
            devices.AddRange(newDevice);
        };
    }

    private async Task<List<BluetoothDevice>> GetDevices()
    {
        return await JSRuntime.InvokeAsync<List<BluetoothDevice>>("discoverBluetoothDevices");
    }

    private void ConnectToDevice(BluetoothDevice device)
    {
        selectedDevice = device;
    }


    public class BluetoothDevice
    {
        public string Name { get; set; }
        public string Id { get; set; }
    }
}