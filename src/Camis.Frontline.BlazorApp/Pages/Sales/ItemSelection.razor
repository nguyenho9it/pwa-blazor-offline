@inject IJSRuntime JSRuntime
@using Camis.Frontline.BlazorApp.Models;

<PageTitle>Sales</PageTitle>

<div class="row">
    @foreach (var product in products)
    {
        <div class="col-6 col-sm-12 col-md-4 col-lg-2">
            <div class="card mb-3" @onclick="() => OpenProductModal(product)">
                <img src="@product.Image" class="card-img-top" alt="@product.Name">
                <div class="card-body">
                    <h5 class="card-title">@product.Name</h5>
                    <p class="card-text">Price: $@product.Price</p>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal -->
<div class="modal fade" id="selectedProductModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">@selectedProduct?.Name</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Price: $@selectedProduct?.Price</p>
                <input class="form-control" type="number" @bind="selectedProductQuantity" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="AddToCard">Add to Cart</button>
            </div>
        </div>
    </div>
</div>


@code {
    private List<Product> products = new List<Product>
        {
            new Product { Id = "1", Name = "Camping Tent 2-Person", Image = "images/tent.png", Price = 79.99 },
            new Product { Id = "2", Name = "Family Cabin Tent", Image = "images/tent.png", Price = 149.99 },
            new Product { Id = "3", Name = "Ultralight Backpacking Tent", Image = "images/tent.png", Price = 129.95 },
            new Product { Id = "4", Name = "Pop-Up Beach Tent", Image = "images/tent.png", Price = 49.99 },
            new Product { Id = "5", Name = "4-Season Mountaineering Tent", Image = "images/tent.png", Price = 249.99 },
            new Product { Id = "6", Name = "Dome Tent with Screen Room", Image = "images/tent.png", Price = 109.99 },
            new Product { Id = "7", Name = "Hiking Tent for 2 Persons", Image = "images/tent.png", Price = 89.99 },
            new Product { Id = "8", Name = "Beach Shelter with UV Protection", Image = "images/tent.png", Price = 69.95 },
            new Product { Id = "9", Name = "Backpacking Hammock Tent", Image = "images/tent.png", Price = 69.99 },
            new Product { Id = "10", Name = "Large Family Tent with Dividers", Image = "images/tent.png", Price = 189.99 },
            new Product { Id = "11", Name = "3-Season Backpacking Tent", Image = "images/tent.png", Price = 119.99 },
            new Product { Id = "12", Name = "Instant Cabin Tent", Image = "images/tent.png", Price = 179.95 },
            new Product { Id = "13", Name = "Compact Pop-Up Tent", Image = "images/tent.png", Price = 59.99 },
            new Product { Id = "14", Name = "Tarp Shelter for Camping", Image = "images/tent.png", Price = 39.99 },
            new Product { Id = "15", Name = "Tent Footprint Ground Cloth", Image = "images/tent.png", Price = 19.99 },
            new Product { Id = "16", Name = "Camping Cot with Tent", Image = "images/tent.png", Price = 149.95 },
            new Product { Id = "17", Name = "4-Person Tunnel Tent", Image = "images/tent.png", Price = 199.99 },
            new Product { Id = "18", Name = "Ultralight Bivy Sack", Image = "images/tent.png", Price = 59.95 },
            new Product { Id = "19", Name = "Tent Repair Kit", Image = "images/tent.png", Price = 14.99 },
            new Product { Id = "20", Name = "Tent Stakes and Guylines Set", Image = "images/tent.png", Price = 9.99 },
        };

    private double selectedProductQuantity = 1;
    private Product selectedProduct = new Product();
    private OrderDetail orderItem = new OrderDetail();

    void OpenProductModal(Product product)
    {
        selectedProduct = product;
        JSRuntime.InvokeVoidAsync("openModal");
    }

    private async Task AddToCard()
    {
        ValidateSelectedProduct();
        await InsertOrderItemToDB();
        ResetSelectedProduct();
    }

    private async Task InsertOrderItemToDB()
    {
        orderItem = new OrderDetail()
            {
                Id = Guid.NewGuid().ToString(),
                ProductId = selectedProduct.Id,
                ProductName = selectedProduct.Name,
                Price = selectedProduct.Price,
                Quantity = selectedProductQuantity,
                Total = selectedProductQuantity * selectedProduct.Price
            };

        await JSRuntime.InvokeVoidAsync("insertOrderItem", orderItem);
    }

    private void ValidateSelectedProduct()
    {
        if (selectedProductQuantity <= 0)
        {
            selectedProductQuantity = 1;
        }
    }

    private void ResetSelectedProduct()
    {
        selectedProductQuantity = 1;
        orderItem = new OrderDetail();
        StateHasChanged();
    }
}
