@page "/cart"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Camis.Frontline.BlazorApp.Models;

<PageTitle>Cart</PageTitle>

<h3 class="d-print-none"> <span class="oi oi-arrow-thick-left" aria-hidden="true" @onclick="BackToSale"></span> <span> Cart</span></h3>

<div>
    @if (OrderDetails != null && OrderDetails.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th class="d-print-none">Product ID</th>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th class="d-print-none"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var orderDetail in OrderDetails)
                {
                    <tr>
                        <td class="d-print-none">@orderDetail.ProductId</td>
                        <td>@orderDetail.ProductName</td>
                        <td>@orderDetail.Price.ToString("C")</td>
                        <td>@orderDetail.Quantity</td>
                        <td>@orderDetail.Total.ToString("C")</td>
                        <td class="d-print-none">
                            <button class="btn p-0" @onclick="() => RemoveOrderDetail(orderDetail)"><span class="oi oi-x"></span></button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>

        <div class="d-flex justify-content-between">
            <div>
                <p>Total:</p>
                <h3>@total.ToString("C")</h3>
            </div>

            <div class="pt-4 d-print-none">
                <button class="btn btn-secondary me-2" @onclick=PrintOrder>Print</button>  <button class="btn btn-secondary" @onclick=ProcessCheckout>Checkout</button>
            </div>
        </div>
    }
    else
    {
        <p>No product item found.</p>
    }
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ReadAll();
            StateHasChanged();
        }
    }

    private double total;
    private double totalQuantity;

    private List<OrderDetail> OrderDetails = new List<OrderDetail>();

    private async Task PrintOrder()
    {
        await JSRuntime.InvokeVoidAsync("printOrder");
    }

    private async Task ReadAll()
    {
        var orderDetails = await JSRuntime.InvokeAsync<List<OrderDetail>>("readAllOrderDetails");
        //Calculate total
        total = 0;
        totalQuantity = 0;
        foreach (var orderDetail in orderDetails)
        {
            orderDetail.Total = orderDetail.Quantity * orderDetail.Price;
            total += orderDetail.Total;
            totalQuantity += orderDetail.Quantity;
        }
        OrderDetails = orderDetails;
    }

    private async Task RemoveOrderDetail(OrderDetail orderDetail)
    {
        OrderDetails.Remove(orderDetail);
        await JSRuntime.InvokeVoidAsync("deleteOrderDetail", orderDetail.Id);
        await ReadAll();
    }


    private void ProcessCheckout()
    {
        // NavigationManager.NavigateTo("/checkout");
    }

    private void BackToSale()
    {
        NavigationManager.NavigateTo("/");
    }
}
